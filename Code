import os
from datetime import datetime

FILE_USER = "users.txt"

class User:
    def __init__(self, user_id, username, pin, saldo):
        self.user_id = user_id
        self.username = username
        self.pin = pin
        self.saldo = saldo

    def cek_saldo(self):
        self.catat_riwayat("saldo", saldo=self.saldo)
        return self.saldo

    def tarik_tunai(self, jumlah):
        if jumlah > self.saldo:
            return False
        self.saldo -= jumlah
        self.catat_riwayat("tarik", jumlah=jumlah)
        return True

    def setor_tunai(self, jumlah):
        self.saldo += jumlah
        self.catat_riwayat("setor", jumlah=jumlah)

    def catat_riwayat(self, aksi, jumlah=None, saldo=None):
        waktu = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
        with open(f"riwayat_{self.username}.txt", "a") as f:
            if aksi == "setor":
                f.write(f"{waktu} SETOR: +{jumlah}\n")
            elif aksi == "tarik":
                f.write(f"{waktu} TARIK: -{jumlah}\n")
            elif aksi == "saldo":
                f.write(f"{waktu} CEK SALDO: Rp{saldo}\n")
            elif aksi == "login":
                f.write(f"{waktu} LOGIN BERHASIL\n")

class UserManager:
    def __init__(self):
        self.users = self.load_users()

    def load_users(self):
        users = {}
        if not os.path.exists(FILE_USER):
            open(FILE_USER, "w").close()
        with open(FILE_USER, "r") as f:
            for line in f:
                parts = line.strip().split("|")
                if len(parts) == 4:
                    user_id, username, pin, saldo = parts
                    try:
                        users[username] = User(user_id, username, pin, int(saldo))
                    except ValueError:
                        print(f"Data saldo tidak valid untuk user {username}")
        return users

    def save_users(self):
        with open(FILE_USER, "w") as f:
            for user in self.users.values():
                f.write(f"{user.user_id}|{user.username}|{user.pin}|{user.saldo}\n")

    def cari_user_by_id(self, id_target):
        for user in self.users.values():
            if user.user_id == id_target:
                return user
        return None

    def tambah_user(self):
        print("\n=== TAMBAH USER BARU ===")
        username = input("Masukkan username baru: ")
        if "|" in username or username in self.users:
            print("Username tidak valid atau sudah digunakan.")
            return
        pin = input("Masukkan PIN baru (6 digit): ")
        if not pin.isdigit() or len(pin) != 6:
            print("PIN harus 6 digit angka.")
            return
        user_id = str(len(self.users) + 1).zfill(4)
        self.users[username] = User(user_id, username, pin, 0)
        self.save_users()
        print(f"User {username} berhasil ditambahkan.")

    def login(self):
        print("\n=== LOGIN ===")
        for attempt in range(3):
            username = input("Masukkan username: ")
            pin = input("Masukkan PIN: ")
            user = self.users.get(username)
            if user and user.pin == pin:
                print(f"\nLogin berhasil. Selamat datang, {username}!")
                user.catat_riwayat("login")
                return user
            print(f"Login gagal. Sisa percobaan: {2 - attempt}")
        print("Gagal login 3 kali.\n")
        return None

class ATM_system:
    def __init__(self):
        self.user_manager = UserManager()

    def auth_pin(self, user):
        for attempt in range(3):
            pin_input = input("Masukkan PIN kembali: ")
            if pin_input == user.pin:
                return True
            print(f"PIN salah. Percobaan tersisa: {2 - attempt}")
        return False

    def tampilkan_menu(self):
        print("\n=== MENU ATM ===")
        print("1. Cek Saldo")
        print("2. Tarik Tunai")
        print("3. Setor Tunai")
        print("4. Lihat Riwayat")
        print("5. Logout")

    def main(self):
        while True:
            print("\n=== SELAMAT DATANG DI ATM SKIBIDI ===")
            print("1. Login")
            print("2. Tambah User Baru")
            print("3. Keluar")
            pilihan = input("Pilih menu (1-3): ")

            if pilihan == "1":
                user = self.user_manager.login()
                if user:
                    self.menu_user(user)
            elif pilihan == "2":
                self.user_manager.tambah_user()
            elif pilihan == "3":
                print("Terima kasih telah menggunakan ATM SKIBIDI.")
                break
            else:
                print("Pilihan tidak valid.")

    def menu_user(self, user):
        while True:
            self.tampilkan_menu()
            pilihan = input("Pilih menu (1-5): ")

            if pilihan == "1":
                print(f"Saldo Anda: Rp{user.cek_saldo():,}")

            elif pilihan == "2":
                if not self.auth_pin(user):
                    continue
                jumlah = self.input_tarik()
                if jumlah and user.tarik_tunai(jumlah):
                    print(f"Penarikan berhasil. Sisa saldo: Rp{user.saldo:,}")
                    self.user_manager.save_users()
                else:
                    print("Saldo tidak cukup.")

            elif pilihan == "3":
                if not self.auth_pin(user):
                    continue
                tujuan = input("Setor ke (1) Rekening Sendiri atau (2) Rekening Lain? ")
                if tujuan == "1":
                    self.setor_sendiri(user)
                elif tujuan == "2":
                    self.setor_ke_user_lain(user)
                else:
                    print("Pilihan tidak valid.")

            elif pilihan == "4":
                self.tampilkan_riwayat(user)

            elif pilihan == "5":
                print("Logout.")
                break
            else:
                print("Pilihan tidak valid.")

    def input_tarik(self):
        print("\nNominal Tarik Tunai:")
        print("1. Rp100.000")
        print("2. Rp300.000")
        print("3. Rp500.000")
        print("4. Rp1.000.000")
        print("5. Custom (Minimal Rp50.000)")

        nominal_map = {"1": 100_000, "2": 300_000, "3": 500_000, "4": 1_000_000}

        while True:
            pilihan = input("Pilih opsi (1-5): ")
            if pilihan in nominal_map:
                return nominal_map[pilihan]
            elif pilihan == "5":
                try:
                    jumlah = int(input("Masukkan jumlah: "))
                    if jumlah < 50000:
                        print("Minimal Rp50.000. Silakan coba lagi.")
                    else:
                        return jumlah
                except ValueError:
                    print("Input tidak valid. Silakan masukkan angka.")
            else:
                print("Pilihan tidak valid. Coba lagi.")

    def setor_sendiri(self, user):
        try:
            jumlah = int(input("Masukkan jumlah setoran: "))
            if jumlah < 50000 or jumlah % 50000 != 0:
                print("Jumlah harus kelipatan dan minimal Rp50.000")
                return
            user.setor_tunai(jumlah)
            self.user_manager.save_users()
            print(f"Setoran berhasil. Saldo: Rp{user.saldo:,}")
        except ValueError:
            print("Input tidak valid.")

    def setor_ke_user_lain(self, user):
        id_tujuan = input("Masukkan ID tujuan: ")
        user_tujuan = self.user_manager.cari_user_by_id(id_tujuan)
        if not user_tujuan or user_tujuan.username == user.username:
            print("ID tidak valid atau sama dengan akun sendiri.")
            return
        try:
            jumlah = int(input("Masukkan jumlah setoran: "))
            if jumlah < 50000 or jumlah % 50000 != 0:
                print("Jumlah tidak valid.")
                return
            if user.saldo < jumlah:
                print("Saldo tidak cukup.")
                return
            user.saldo -= jumlah
            user_tujuan.saldo += jumlah
            user.catat_riwayat("setor", jumlah=jumlah)
            self.user_manager.save_users()
            print(f"Transfer ke {user_tujuan.username} berhasil. Sisa saldo: Rp{user.saldo:,}")
        except ValueError:
            print("Input tidak valid.")

    def tampilkan_riwayat(self, user):
        print(f"\n=== RIWAYAT TRANSAKSI ({user.username}) ===")
        try:
            with open(f"riwayat_{user.username}.txt", "r") as f:
                print(f.read())
        except FileNotFoundError:
            print("Belum ada riwayat transaksi.")

if __name__ == "__main__":
    atm = ATM_system()
    atm.main()
